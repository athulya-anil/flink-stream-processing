package spendreport.detailed.sink;

import org.apache.flink.annotation.PublicEvolving;
import org.apache.flink.streaming.api.functions.sink.SinkFunction;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import spendreport.detailed.model.DetailedAlert;

/**
 * A custom sink implementation for processing and handling detailed alerts.
 * This sink receives alerts generated by the Flink pipeline and processes them.
 *
 * It uses a simple mechanism to print detected alerts to the console.
 * The sink can be replaced with a more complex implementation, such as sending
 * alerts to an external system (e.g., a database or a message queue).
 *
 * The class is annotated with @PublicEvolving, indicating that it is a part of the
 * public API but is subject to changes in future versions.
 */
@PublicEvolving
public class DetailedAlertSink implements SinkFunction<DetailedAlert> {

    // Serialization ID to ensure compatibility during serialization
    private static final long serialVersionUID = 1L;

    // Logger for logging alerts and errors (if needed)
    private static final Logger LOG = LoggerFactory.getLogger(DetailedAlertSink.class);

    /**
     * Default constructor for DetailedAlertSink.
     * The annotation @NOSONAR is used to suppress SonarLint warnings for this constructor.
     */
    public DetailedAlertSink() { // NOSONAR
    }

    /**
     * The invoke method is called for each alert collected by the sink.
     * It prints the alert details to the console.
     *
     * @param value The DetailedAlert object containing information about the detected fraud
     * @param context The runtime context of the Flink sink
     */
    @Override
    public void invoke(DetailedAlert value, Context context) {
        // Print the alert details to the console for debugging and monitoring
        System.out.println("Alert detected: " + value);
    }
}
